<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="InvalidSchemeException" xml:space="preserve">
    <value>Only scheme '{0}' is supported.  The given uri '{1}' is not supported.</value>
    <comment>0 = the supported scheme, 1 = the given uri</comment>
  </data>
  <data name="MessageNotHandledFailure" xml:space="preserve">
    <value>No handler has been registered for message type '{0}'.  The message (id '{1}') has been moved to error queue '{2}'.</value>
    <comment>0 = full type name of the discarded message, 1= message id, 2 = error queue uri</comment>
  </data>
  <data name="MessageRouteNotFound" xml:space="preserve">
    <value>No route could be found for message of type '{0}'.</value>
    <comment>0 = full type name of message</comment>
  </data>
  <data name="QueueFactoryNotFoundException" xml:space="preserve">
    <value>No queue factory has been registered for scheme '{0}'.</value>
    <comment>0 = scheme (key)</comment>
  </data>
  <data name="UriFormatException" xml:space="preserve">
    <value>Expected uri format '{0}' but received '{1}'.</value>
    <comment>0 = valid uri format, 1 = invalid uri format</comment>
  </data>
  <data name="TypeListMessageRouteSpecificationUnknownType" xml:space="preserve">
    <value>Cannot get type '{0}' for TypeListMessageRouteSpecification.</value>
    <comment>0 = the given type name</comment>
  </data>
  <data name="AssemblyNotFound" xml:space="preserve">
    <value>Could not find assembly '{0}' during operation '{1}'.</value>
    <comment>0 = assembly name, 1 = operation name</comment>
  </data>
  <data name="RequiredQueueUriMissingException" xml:space="preserve">
    <value>Required queue uri '{0}' has not been configured.  Please check your application settings or your code if you implemented it explicitly.</value>
    <comment>0 = name of the required queue uri</comment>
  </data>
  <data name="MessageRoutedToMoreThanOneEndpoint" xml:space="preserve">
    <value>Message of type '{0}' has been routed to more than one endpoint: {1}</value>
    <comment>0 = full type name of message, 1 = comma-delimited string containing all endpoint queue uris</comment>
  </data>
  <data name="UnknownMessageRouteSpecification" xml:space="preserve">
    <value>Unknown message route specification '{0}'.  Cannot create the specification.</value>
    <comment>0 = specification name</comment>
  </data>
  <data name="TraceTransportMessageDeferred" xml:space="preserve">
    <value>Transport message with id '{0}' will be deferred until '{1}'.</value>
    <comment>0 = transport message id, 1 = deferred till date</comment>
  </data>
  <data name="ServiceBusInstanceAlreadyStarted" xml:space="preserve">
    <value>The service bus instance has already been started.</value>
  </data>
  <data name="MessageNotHandledIgnored" xml:space="preserve">
    <value>No handler has been registered for message type '{0}'.  The message (id '{1}') has been ignored.</value>
    <comment>0 = full type name of the discarded message, 1= message id</comment>
  </data>
  <data name="DeferredMessageProcessorInstanceException" xml:space="preserve">
    <value>Only one instance of the DeferredMessageProcessor should be created.  Check that the ProcessorThreadPool for the DeferredMessageProcessorFactory is not using more than 1 thread.</value>
  </data>
  <data name="SendToSelfException" xml:space="preserve">
    <value>You cannot send a message to this endpoint (Local) since this endpoint has no inbox.</value>
  </data>
  <data name="SendReplyException" xml:space="preserve">
    <value>Cannot send reply as the provided transport message received has no inbox work queue uri.</value>
  </data>
  <data name="UriNameNotFoundException" xml:space="preserve">
    <value>The IUriResolver type '{0}' could not resolve name '{1}'.</value>
    <comment>0 = full type name of the IUriResolver implementation, 1 = the required name</comment>
  </data>
  <data name="QueueFactoryCreatedNullQueue" xml:space="preserve">
    <value>Queue factory with type '{0}' create returned (null) for uri '{1}'.</value>
    <comment>0 = the queue factory type name, 1 = the uri that the threadActivityFactory was requested to create the queue for</comment>
  </data>
  <data name="ServiceBusInstanceNotStarted" xml:space="preserve">
    <value>The service bus instance has not yet been started.</value>
  </data>
  <data name="HandlerMessageMethodMissingException" xml:space="preserve">
    <value>Handler type '{0}' does not have the required `ProcessMessage` method that handles message type '{1}'.</value>
    <comment>0 = handler full type name, 1 = message full type name</comment>
  </data>
  <data name="RequiredOptionsMissingException" xml:space="preserve">
    <value>Required options '{0}' have not been provided.</value>
    <comment>0 = options name</comment>
  </data>
  <data name="MessageRoutesRequireSpecificationException" xml:space="preserve">
    <value>If a message route is defined it requires at least one specification.</value>
  </data>
  <data name="InvalidUriException" xml:space="preserve">
    <value>The value '{0}' is not a valid URI for '{1}'.</value>
    <comment>0 = invalid URI string, 1 = URI name/type</comment>
  </data>
  <data name="NoErrorQueue" xml:space="preserve">
    <value>(no error queue)</value>
  </data>
  <data name="DeferStreamException" xml:space="preserve">
    <value>Cannot defer messages when the inbox is a stream.</value>
  </data>
  <data name="TransportMessageRecipientException" xml:space="preserve">
    <value>The recipient has already been set for the transport message.</value>
  </data>
  <data name="NotImplementedOnQueue" xml:space="preserve">
    <value>Queue '{0}' does not implement interface '{1}'.</value>
    <comment>0 = full type name of queue, 1 = interface not implemented</comment>
  </data>
  <data name="DuplicateQueueConfigurationNameException" xml:space="preserve">
    <value>This is already a configuration registered for endpoint with name '{0}'.</value>
    <comment>0 = configuration name</comment>
  </data>
  <data name="QueueConfigurationNameException" xml:space="preserve">
    <value>The configuration name is empty.</value>
  </data>
  <data name="QueueConfigurationItemException" xml:space="preserve">
    <value>Queue configuration with name '{0}' requires a value for '{1}'.</value>
    <comment>0 = configuration name, 1 = item name</comment>
  </data>
  <data name="SubscribeWithNoInboxException" xml:space="preserve">
    <value>Attempted to subscribe to messages but there is no inbox configured.</value>
  </data>
  <data name="AddSubscriptionException" xml:space="preserve">
    <value>Cannot add subscription as a valid instance of the `MessageTypes` list cannot be reached.</value>
  </data>
  <data name="IncorrectStopCalledException" xml:space="preserve">
    <value>The service bus is running in '{0}' mode.  To stop please call the '{1}' method.</value>
    <comment>0 = mode, 1 = stop method name</comment>
  </data>
  <data name="MessageNotHandledMissingErrorQueueFailure" xml:space="preserve">
    <value>No handler has been registered for message type '{0}'.  The message (id '{1}') could not be moved to the error queue as no error queue has been set in the pipeline state.</value>
    <comment>0 = full type name of the discarded message, 1= message id</comment>
  </data>
  <data name="ServiceBusStartAsynchronousException" xml:space="preserve">
    <value>The service bus options asynchronous value is 'true'.  Cannot start the service bus synchronously.  Please call the `StartAsync()` method.</value>
  </data>
  <data name="ServiceBusStartSynchronousException" xml:space="preserve">
    <value>The service bus options asynchronous value is 'false'.  Cannot start the service bus asynchronously.  Please call the `Start()` method.</value>
  </data>
  <data name="HandlerContextConstructorMissingException" xml:space="preserve">
    <value>Could not create a HandlerContext for type '{0}'.</value>
    <comment>0 = handler context type</comment>
  </data>
  <data name="CouldNotResolveSourceUriException" xml:space="preserve">
    <value>Could not resolve source uri '{0}'.</value>
    <comment>0 = source uri</comment>
  </data>
  <data name="MessageHandlerTypeException" xml:space="preserve">
    <value>The delegate must contain a parameter of type `IHandlerContext&lt;TMessage&gt;`.</value>
  </data>
  <data name="DelegateAlreadyRegisteredException" xml:space="preserve">
    <value>There is already a delegate registered for message type '{0}'.</value>
    <comment>0 = message type name</comment>
  </data>
  <data name="MessageHandlerAlreadyRegisteredException" xml:space="preserve">
    <value>Message handler with type '{0}' has already been registered.</value>
    <comment>0 = message handler type name</comment>
  </data>
</root>